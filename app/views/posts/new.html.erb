<div id="new-post-container" data-controller="record-video">

  <%= render partial: "new_video" %>
<div id="form-container">
  <%= form_with(model: @post, local: true, id: 'form', data: { target: 'record-video.form', action: 'submit->record-video#savePost' }) do |f| %>
    <div class="form-inputs">
     <%= f.label :place_rating %>
      <div class="star-rating">
        <%= f.radio_button :place_rating, 1, id: 'star1' %>
        <label for="star1" class="fas fa-star"></label>

        <%= f.radio_button :place_rating, 2, id: 'star2' %>
        <label for="star2" class="fas fa-star"></label>

        <%= f.radio_button :place_rating, 3, id: 'star3' %>
        <label for="star3" class="fas fa-star"></label>

        <%= f.radio_button :place_rating, 4, id: 'star4' %>
        <label for="star4" class="fas fa-star"></label>

        <%= f.radio_button :place_rating, 5, id: 'star5' %>
        <label for="star5" class="fas fa-star"></label>
      </div>


      <%= f.label "Search for a place" %>
      <%= text_field_tag "google_place_search", '', id: "autocomplete", required: true %>

    </div>
      <%= f.submit "Uploading...", id: 'submit_button', disabled: true %>

    <ul id="results"></ul>
    <%# Show uploading text while response is being processed %>


    <%= f.hidden_field :video_url, id: 'hidden_video_url' %>
    <%= f.hidden_field :video_public_id, id: 'hidden_video_public_id' %>
    <%= hidden_field_tag "google_place_id" %>
  <% end %>
  </div>

</div>

<script>
  (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
    key: "AIzaSyCP9ddbLQHA_0fgCM0gwxfs7veczOEF5HI",
    v: "weekly",
    // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
    // Add other bootstrap parameters as needed, using camel case.
  });

  // Initialize autocomplete
  let autocomplete;
  async function initAutocomplete() {
    // The following line will import the places library.
    const { Autocomplete } = await google.maps.importLibrary("places");
    autocomplete = new Autocomplete(
      document.getElementById('autocomplete')
    );

    autocomplete.addListener('place_changed', function() {
      var place = autocomplete.getPlace();
      if (!place.geometry) {
        // User entered the name of a Place that was not suggested and pressed the Enter key, or the Place Details request failed.
        window.alert("No details available for input: '" + place.name + "'");
        return;
      }
      document.getElementById('google_place_id').value = place.place_id;
    });
  }

  initAutocomplete();
</script>
